import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class Transaksi:
    def __init__(self, tanggal, jenis, kategori, jumlah, deskripsi):
        self.tanggal = datetime.strptime(tanggal, '%Y-%m-%d')
        self.jenis = jenis
        self.kategori = kategori
        self.jumlah = jumlah
        self.deskripsi = deskripsi

class Anggaran:
    def __init__(self, kategori, jumlah, periode):
        self.kategori = kategori
        self.jumlah = jumlah
        self.periode = periode
        self.status = "Belum Tercapai"

class Keuangan:
    def __init__(self):
        self.transaksi_list = []
        self.anggaran_list = []

    def tambah_transaksi(self, transaksi):
        self.transaksi_list.append(transaksi)

    def hapus_transaksi(self, index):
        del self.transaksi_list[index]

    def tambah_anggaran(self, anggaran):
        self.anggaran_list.append(anggaran)

    def total_pemasukan(self):
        return sum(t.jumlah for t in self.transaksi_list if t.jenis == 'Pemasukan')

    def total_pengeluaran(self):
        return sum(t.jumlah for t in self.transaksi_list if t.jenis == 'Pengeluaran')

class KeuanganGUI:
    def __init__(self, root):
        self.keuangan = Keuangan()
        self.root = root
        self.root.title("Sistem Pencatatan Keuangan Pribadi")

        self.create_widgets()

    def create_widgets(self):
        header = tk.Frame(self.root, bg='blue', pady=10)
        header.pack(fill=tk.X)
        title = tk.Label(header, text="Sistem Pencatatan Keuangan Pribadi", bg='blue', fg='white', font=('Arial', 16))
        title.pack()

        menu = tk.Frame(self.root, bg='lightgray', pady=10)
        menu.pack(fill=tk.X)
        self.btn_dashboard = tk.Button(menu, text="Dashboard", command=self.show_dashboard)
        self.btn_transaksi = tk.Button(menu, text="Transaksi", command=self.show_transaksi)
        self.btn_anggaran = tk.Button(menu, text="Anggaran", command=self.show_anggaran)
        self.btn_laporan = tk.Button(menu, text="Laporan", command=self.show_laporan)
        self.btn_pengaturan = tk.Button(menu, text="Pengaturan", command=self.show_pengaturan)

        self.btn_dashboard.pack(side=tk.LEFT, padx=10)
        self.btn_transaksi.pack(side=tk.LEFT, padx=10)
        self.btn_anggaran.pack(side=tk.LEFT, padx=10)
        self.btn_laporan.pack(side=tk.LEFT, padx=10)
        self.btn_pengaturan.pack(side=tk.LEFT, padx=10)

        # Main Frame
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        self.show_dashboard()

    def show_dashboard(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Dashboard", font=('Arial', 14)).pack()
        tk.Label(self.main_frame, text=f"Total Pemasukan: Rp {self.keuangan.total_pemasukan():,.2f}").pack()
        tk.Label(self.main_frame, text=f"Total Pengeluaran: Rp {self.keuangan.total_pengeluaran():,.2f}").pack()

    def show_transaksi(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Pencatatan Transaksi", font=('Arial', 14)).pack()

        form = tk.Frame(self.main_frame)
        form.pack(pady=10)

        tk.Label(form, text="Tanggal (YYYY-MM-DD)").grid(row=0, column=0, padx=5, pady=5)
        tk.Label(form, text="Jenis").grid(row=1, column=0, padx=5, pady=5)
        tk.Label(form, text="Kategori").grid(row=2, column=0, padx=5, pady=5)
        tk.Label(form, text="Jumlah").grid(row=3, column=0, padx=5, pady=5)
        tk.Label(form, text="Deskripsi").grid(row=4, column=0, padx=5, pady=5)

        self.entry_tanggal = tk.Entry(form)
        self.entry_jenis = ttk.Combobox(form, values=["Pemasukan", "Pengeluaran"])
        self.entry_kategori = ttk.Combobox(form, values=[])
        self.entry_jumlah = tk.Entry(form)
        self.entry_deskripsi = tk.Entry(form)

        self.entry_tanggal.grid(row=0, column=1, padx=5, pady=5)
        self.entry_jenis.grid(row=1, column=1, padx=5, pady=5)
        self.entry_kategori.grid(row=2, column=1, padx=5, pady=5)
        self.entry_jumlah.grid(row=3, column=1, padx=5, pady=5)
        self.entry_deskripsi.grid(row=4, column=1, padx=5, pady=5)

        self.entry_jenis.bind("<<ComboboxSelected>>", self.update_kategori)

        tk.Button(form, text="Simpan", command=self.simpan_transaksi).grid(row=5, column=1, pady=10)

        self.tabel_transaksi = ttk.Treeview(self.main_frame, columns=("Tanggal", "Jenis", "Kategori", "Jumlah", "Deskripsi"), show="headings")
        self.tabel_transaksi.heading("Tanggal", text="Tanggal")
        self.tabel_transaksi.heading("Jenis", text="Jenis")
        self.tabel_transaksi.heading("Kategori", text="Kategori")
        self.tabel_transaksi.heading("Jumlah", text="Jumlah")
        self.tabel_transaksi.heading("Deskripsi", text="Deskripsi")
        self.tabel_transaksi.pack(fill=tk.BOTH, expand=True)

        self.load_transaksi()

    def update_kategori(self, event):
        jenis = self.entry_jenis.get()
        if jenis == "Pemasukan":
            self.entry_kategori['values'] = ["Gaji", "Bonus", "Investasi", "Lainnya"]
        elif jenis == "Pengeluaran":
            self.entry_kategori['values'] = ["Makanan", "Transportasi", "Hiburan", "Lainnya"]

    def simpan_transaksi(self):
        try:
            tanggal = self.entry_tanggal.get()
            jenis = self.entry_jenis.get()
            kategori = self.entry_kategori.get()
            jumlah = float(self.entry_jumlah.get())
            deskripsi = self.entry_deskripsi.get()

            if not tanggal or not jenis or not kategori or not deskripsi:
                raise ValueError("Semua field harus diisi")

            if jenis == "Pengeluaran":
                jumlah = -jumlah

            transaksi = Transaksi(tanggal, jenis, kategori, jumlah, deskripsi)
            self.keuangan.tambah_transaksi(transaksi)
            messagebox.showinfo("Informasi", "Transaksi berhasil disimpan")
            self.load_transaksi()
        except ValueError as e:
            messagebox.showerror("Error", f"Data tidak valid: {e}")

    def load_transaksi(self):
        for item in self.tabel_transaksi.get_children():
            self.tabel_transaksi.delete(item)
        for transaksi in self.keuangan.transaksi_list:
            self.tabel_transaksi.insert("", "end", values=(transaksi.tanggal.strftime('%Y-%m-%d'), transaksi.jenis, transaksi.kategori, transaksi.jumlah, transaksi.deskripsi))

    def show_anggaran(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Pengaturan Anggaran", font=('Arial', 14)).pack()

        form = tk.Frame(self.main_frame)
        form.pack(pady=10)

        tk.Label(form, text="Kategori").grid(row=0, column=0, padx=5, pady=5)
        tk.Label(form, text="Jumlah").grid(row=1, column=0, padx=5, pady=5)
        tk.Label(form, text="Periode").grid(row=2, column=0, padx=5, pady=5)

        self.entry_kategori_anggaran = ttk.Combobox(form, values=["Makanan", "Transportasi", "Hiburan", "Lainnya"])
        self.entry_jumlah_anggaran = tk.Entry(form)
        self.entry_periode_anggaran = ttk.Combobox(form, values=["Mingguan", "Bulanan", "Tahunan"])

        self.entry_kategori_anggaran.grid(row=0, column=1, padx=5, pady=5)
        self.entry_jumlah_anggaran.grid(row=1, column=1, padx=5, pady=5)
        self.entry_periode_anggaran.grid(row=2, column=1, padx=5, pady=5)

        tk.Button(form, text="Simpan", command=self.simpan_anggaran).grid(row=3, column=1, pady=10)

        self.tabel_anggaran = ttk.Treeview(self.main_frame, columns=("Kategori", "Jumlah", "Periode", "Status"), show="headings")
        self.tabel_anggaran.heading("Kategori", text="Kategori")
        self.tabel_anggaran.heading("Jumlah", text="Jumlah")
        self.tabel_anggaran.heading("Periode", text="Periode")
        self.tabel_anggaran.heading("Status", text="Status")
        self.tabel_anggaran.pack(fill=tk.BOTH, expand=True)

        self.load_anggaran()

    def simpan_anggaran(self):
        try:
            kategori = self.entry_kategori_anggaran.get()
            jumlah = float(self.entry_jumlah_anggaran.get())
            periode = self.entry_periode_anggaran.get()

            if not kategori or not jumlah or not periode:
                raise ValueError("Semua field harus diisi")

            anggaran = Anggaran(kategori, jumlah, periode)
            self.keuangan.tambah_anggaran(anggaran)
            messagebox.showinfo("Informasi", "Anggaran berhasil disimpan")
            self.load_anggaran()
        except ValueError as e:
            messagebox.showerror("Error", f"Data tidak valid: {e}")

    def load_anggaran(self):
        for item in self.tabel_anggaran.get_children():
            self.tabel_anggaran.delete(item)
        for anggaran in self.keuangan.anggaran_list:
            self.tabel_anggaran.insert("", "end", values=(anggaran.kategori, anggaran.jumlah, anggaran.periode, anggaran.status))

    def show_laporan(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Laporan dan Grafik", font=('Arial', 14)).pack()

        periode_frame = tk.Frame(self.main_frame)
        periode_frame.pack(pady=10)

        tk.Label(periode_frame, text="Pilih Periode: ").pack(side=tk.LEFT, padx=5)
        self.combo_periode = ttk.Combobox(periode_frame, values=["Mingguan", "Bulanan", "Tahunan"])
        self.combo_periode.pack(side=tk.LEFT, padx=5)
        
        tk.Label(periode_frame, text="Pilih Jenis Grafik: ").pack(side=tk.LEFT, padx=5)
        self.combo_jenis_grafik = ttk.Combobox(periode_frame, values=["Pemasukan", "Pengeluaran"])
        self.combo_jenis_grafik.pack(side=tk.LEFT, padx=5)

        tk.Button(periode_frame, text="Tampilkan", command=self.tampilkan_grafik).pack(side=tk.LEFT, padx=5)

        self.grafik_frame = tk.Frame(self.main_frame)
        self.grafik_frame.pack(fill=tk.BOTH, expand=True)

    def tampilkan_grafik(self):
        for widget in self.grafik_frame.winfo_children():
            widget.destroy()

        periode = self.combo_periode.get()
        jenis_grafik = self.combo_jenis_grafik.get()

        if periode and jenis_grafik:
            data_per_kategori = {}
            for transaksi in self.keuangan.transaksi_list:
                if transaksi.jenis == jenis_grafik:
                    if transaksi.kategori not in data_per_kategori:
                        data_per_kategori[transaksi.kategori] = 0
                    data_per_kategori[transaksi.kategori] += transaksi.jumlah

            kategori = list(data_per_kategori.keys())
            jumlah = list(data_per_kategori.values())

            fig, ax = plt.subplots()
            ax.bar(kategori, jumlah)
            ax.set_xlabel('Kategori')
            ax.set_ylabel(f'Jumlah {jenis_grafik}')
            ax.set_title(f'Grafik {jenis_grafik} ({periode})')

            canvas = FigureCanvasTkAgg(fig, master=self.grafik_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def show_pengaturan(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["pengaturan_pengguna"], font=('Arial', 14)).pack()

    def clear_frame(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = KeuanganGUI(root)
    root.mainloop()
