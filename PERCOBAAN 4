import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Model
class Transaksi:
    def __init__(self, tanggal, jenis, kategori, jumlah, deskripsi):
        self.tanggal = datetime.strptime(tanggal, '%Y-%m-%d')
        self.jenis = jenis
        self.kategori = kategori
        self.jumlah = jumlah
        self.deskripsi = deskripsi

class Anggaran:
    def __init__(self, kategori, jumlah, periode):
        self.kategori = kategori
        self.jumlah = jumlah
        self.periode = periode
        self.status = "Belum Tercapai"

# Controller
class Keuangan:
    def __init__(self):
        self.transaksi_list = []
        self.anggaran_list = []

    def tambah_transaksi(self, transaksi):
        self.transaksi_list.append(transaksi)

    def hapus_transaksi(self, index):
        del self.transaksi_list[index]

    def tambah_anggaran(self, anggaran):
        self.anggaran_list.append(anggaran)

    def total_pemasukan(self):
        return sum(t.jumlah for t in self.transaksi_list if t.jenis == 'Pemasukan')

    def total_pengeluaran(self):
        return sum(t.jumlah for t in self.transaksi_list if t.jenis == 'Pengeluaran')

# View
class KeuanganGUI:
    def __init__(self, root):
        self.keuangan = Keuangan()
        self.root = root
        self.root.title("Sistem Pencatatan Keuangan Pribadi")

        self.bahasa = tk.StringVar(value="Indonesia")
        self.tema = tk.StringVar(value="Terang")

        self.texts = {
            "Indonesia": {
                "title": "Sistem Pencatatan Keuangan Pribadi",
                "dashboard": "Dashboard",
                "transaksi": "Transaksi",
                "anggaran": "Anggaran",
                "laporan": "Laporan",
                "pengaturan": "Pengaturan",
                "tanggal": "Tanggal (YYYY-MM-DD)",
                "jenis": "Jenis",
                "kategori": "Kategori",
                "jumlah": "Jumlah",
                "deskripsi": "Deskripsi",
                "simpan": "Simpan",
                "pengaturan_anggaran": "Pengaturan Anggaran",
                "periode": "Periode",
                "total_pemasukan": "Total Pemasukan: Rp {0:,.2f}",
                "total_pengeluaran": "Total Pengeluaran: Rp {0:,.2f}",
                "laporan_grafik": "Laporan dan Grafik",
                "pilih_periode": "Pilih Periode: ",
                "pilih_kategori_grafik": "Pilih Kategori Grafik: ",
                "tampilkan": "Tampilkan",
                "pengaturan_pengguna": "Pengaturan Pengguna",
                "pilih_bahasa": "Pilih Bahasa",
                "pilih_tema": "Pilih Tema",
                "transaksi_berhasil": "Transaksi berhasil disimpan",
                "anggaran_berhasil": "Anggaran berhasil disimpan",
                "data_tidak_valid": "Data tidak valid: {0}"
            },
            "Inggris": {
                "title": "Personal Finance Recording System",
                "dashboard": "Dashboard",
                "transaksi": "Transactions",
                "anggaran": "Budget",
                "laporan": "Reports",
                "pengaturan": "Settings",
                "tanggal": "Date (YYYY-MM-DD)",
                "jenis": "Type",
                "kategori": "Category",
                "jumlah": "Amount",
                "deskripsi": "Description",
                "simpan": "Save",
                "pengaturan_anggaran": "Budget Settings",
                "periode": "Period",
                "total_pemasukan": "Total Income: Rp {0:,.2f}",
                "total_pengeluaran": "Total Expense: Rp {0:,.2f}",
                "laporan_grafik": "Reports and Charts",
                "pilih_periode": "Select Period: ",
                "pilih_kategori_grafik": "Select Chart Category: ",
                "tampilkan": "Show",
                "pengaturan_pengguna": "User Settings",
                "pilih_bahasa": "Select Language",
                "pilih_tema": "Select Theme",
                "transaksi_berhasil": "Transaction saved successfully",
                "anggaran_berhasil": "Budget saved successfully",
                "data_tidak_valid": "Invalid data: {0}"
            }
        }

        self.create_widgets()
        self.update_text()  # Panggil fungsi update_text pada saat inisialisasi

    def update_text(self):
        # Update teks pada setiap widget berdasarkan bahasa yang dipilih
        self.title_label.config(text=self.texts[self.bahasa.get()]["title"])
        self.btn_dashboard.config(text=self.texts[self.bahasa.get()]["dashboard"])
        self.btn_transaksi.config(text=self.texts[self.bahasa.get()]["transaksi"])
        self.btn_anggaran.config(text=self.texts[self.bahasa.get()]["anggaran"])
        self.btn_laporan.config(text=self.texts[self.bahasa.get()]["laporan"])
        self.btn_pengaturan.config(text=self.texts[self.bahasa.get()]["pengaturan"])
        # Update teks pada widget lainnya...

    def create_widgets(self):
        # Header
        header = tk.Frame(self.root, bg='blue', pady=10)
        header.pack(fill=tk.X)
        self.title_label = tk.Label(header, text=self.texts[self.bahasa.get()]["title"], bg='blue', fg='white', font=('Arial', 16))
        self.title_label.pack()

        # Menu
        menu = tk.Frame(self.root, bg='lightgray', pady=10)
        menu.pack(fill=tk.X)
        self.btn_dashboard = tk.Button(menu, text=self.texts[self.bahasa.get()]["dashboard"], command=self.show_dashboard)
        self.btn_transaksi = tk.Button(menu, text=self.texts[self.bahasa.get()]["transaksi"], command=self.show_transaksi)
        self.btn_anggaran = tk.Button(menu, text=self.texts[self.bahasa.get()]["anggaran"], command=self.show_anggaran)
        self.btn_laporan = tk.Button(menu, text=self.texts[self.bahasa.get()]["laporan"], command=self.show_laporan)
        self.btn_pengaturan = tk.Button(menu, text=self.texts[self.bahasa.get()]["pengaturan"], command=self.show_pengaturan)

        self.btn_dashboard.pack(side=tk.LEFT, padx=10)
        self.btn_transaksi.pack(side=tk.LEFT, padx=10)
        self.btn_anggaran.pack(side=tk.LEFT, padx=10)
        self.btn_laporan.pack(side=tk.LEFT, padx=10)
        self.btn_pengaturan.pack(side=tk.LEFT, padx=10)

        # Main Frame
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        self.show_dashboard()

    def show_dashboard(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["dashboard"], font=('Arial', 14)).pack()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["total_pemasukan"].format(self.keuangan.total_pemasukan())).pack()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["total_pengeluaran"].format(self.keuangan.total_pengeluaran())).pack()

    def show_transaksi(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["transaksi"], font=('Arial', 14)).pack()
         # Form untuk memasukkan transaksi baru
        form = tk.Frame(self.main_frame)
        form.pack(pady=10)

        tk.Label(form, text=self.texts[self.bahasa.get()]["tanggal"]).grid(row=0, column=0, padx=5, pady=5)
        tanggal_entry = tk.Entry(form)
        tanggal_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(form, text=self.texts[self.bahasa.get()]["kategori"]).grid(row=1, column=0, padx=5, pady=5)
        kategori_combobox = ttk.Combobox(form, values=["Makanan", "Transportasi", "Hiburan", "Lainnya"], state="readonly")
        kategori_combobox.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(form, text=self.texts[self.bahasa.get()]["jumlah"]).grid(row=2, column=0, padx=5, pady=5)
        jumlah_entry = tk.Entry(form)
        jumlah_entry.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(form, text=self.texts[self.bahasa.get()]["deskripsi"]).grid(row=3, column=0, padx=5, pady=5)
        deskripsi_entry = tk.Entry(form)
        deskripsi_entry.grid(row=3, column=1, padx=5, pady=5)

        tk.Button(form, text=self.texts[self.bahasa.get()]["simpan"], command=lambda: self.simpan_transaksi(tanggal_entry.get(), kategori_combobox.get(), jumlah_entry.get(), deskripsi_entry.get())).grid(row=4, columnspan=2, pady=10)

    def show_anggaran(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["pengaturan_anggaran"], font=('Arial', 14)).pack()
        # Implementasi tampilan anggaran lainnya...

    def show_laporan(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["laporan_grafik"], font=('Arial', 14)).pack()
        # Implementasi tampilan laporan lainnya...

    def show_pengaturan(self):
        self.clear_frame()
        tk.Label(self.main_frame, text=self.texts[self.bahasa.get()]["pengaturan_pengguna"], font=('Arial', 14)).pack()

        form = tk.Frame(self.main_frame)
        form.pack(pady=10)

        tk.Label(form, text=self.texts[self.bahasa.get()]["pilih_bahasa"]).grid(row=0, column=0, padx=5, pady=5)
        bahasa_combobox = ttk.Combobox(form, textvariable=self.bahasa, values=["Indonesia", "Inggris"], state="readonly")
        bahasa_combobox.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(form, text=self.texts[self.bahasa.get()]["pilih_tema"]).grid(row=1, column=0, padx=5, pady=5)
        tema_combobox = ttk.Combobox(form, textvariable=self.tema, values=["Terang", "Gelap"], state="readonly")
        tema_combobox.grid(row=1, column=1, padx=5, pady=5)

        tk.Button(form, text=self.texts[self.bahasa.get()]["simpan"], command=self.simpan_pengaturan).grid(row=2, column=1, pady=10)

    def simpan_pengaturan(self):
        bahasa = self.bahasa.get()
        tema = self.tema.get()

        self.title_label.config(text=self.texts[bahasa]["title"])
        self.btn_dashboard.config(text=self.texts[bahasa]["dashboard"])
        self.btn_transaksi.config(text=self.texts[bahasa]["transaksi"])
        self.btn_anggaran.config(text=self.texts[bahasa]["anggaran"])
        self.btn_laporan.config(text=self.texts[bahasa]["laporan"])
        self.btn_pengaturan.config(text=self.texts[bahasa]["pengaturan"])

        if tema == "Terang":
            self.root.config(bg="white")
            self.main_frame.config(bg="white")
        elif tema == "Gelap":
            self.root.config(bg="gray20")
            self.main_frame.config(bg="gray20")

    def clear_frame(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = KeuanganGUI(root)
    root.mainloop()

