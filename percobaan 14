import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import DateEntry
import datetime
from PIL import Image, ImageTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class BudgetBuddyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("BudgetBuddy")
        self.root.geometry("800x600")
        self.root.configure(bg='#003366')
        self.account_name = ""
        self.initial_amount = 0.0
        self.balance = 0.0
        self.transactions = []

        self.create_widgets()

    def create_widgets(self):
        self.title_label = tk.Label(self.root, text="WELCOME TO", font=("Arial Black", 45), bg='#003366', fg='white')
        self.title_label.pack(pady=(10, 0))

        image = Image.open("photo_2024-05-21_21-04-10.png")
        image = image.resize((350, 150), Image.LANCZOS)
        photo = ImageTk.PhotoImage(image)
        self.photo = photo

        self.image_label = tk.Label(self.root, image=self.photo, bg='#003366')
        self.image_label.pack(pady=(20, 0))

        self.info_label = tk.Label(self.root, text="Track Your Income and Expenses Effortlessly", font=("Arial", 12), bg='#003366', fg='white')
        self.info_label.pack(pady=(2, 20))

        self.continue_button = tk.Button(self.root, text="Continue", command=self.open_account_setup)
        self.continue_button.pack(pady=10)

    def open_account_setup(self):
        self.title_label.pack_forget()
        self.image_label.pack_forget()
        self.info_label.pack_forget()
        self.continue_button.pack_forget()

        self.add_account_label = tk.Label(self.root, text="Add Account", font=("Arial", 18), bg='#003366', fg='white')
        self.add_account_label.pack(pady=(20, 5))

        self.choose_name_label = tk.Label(self.root, text="Choose A Name For Your Account", font=("Arial", 12), bg='#003366', fg='white')
        self.choose_name_label.pack(pady=5)

        self.account_name_entry = tk.Entry(self.root)
        self.account_name_entry.pack(pady=5)

        self.next_button = tk.Button(self.root, text="Next", command=self.open_initial_amount)
        self.next_button.pack(pady=20)

    def open_initial_amount(self):
        self.add_account_label.pack_forget()
        self.choose_name_label.pack_forget()
        self.account_name_entry.pack_forget()
        self.next_button.pack_forget()

        self.account_name = self.account_name_entry.get()

        self.initial_amount_label = tk.Label(self.root, text="INITIAL AMOUNT", font=("Arial", 18), bg='#003366', fg='white')
        self.initial_amount_label.pack(pady=(20, 5))

        self.cash_wallet_label = tk.Label(self.root, text="How much money do you have in your cash wallet?", font=("Arial", 12), bg='#003366', fg='white')
        self.cash_wallet_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.root)
        self.amount_entry.pack(pady=5)

        self.done_button = tk.Button(self.root, text="Done", command=self.initial_amount_submitted)
        self.done_button.pack(pady=5)

        self.skip_button = tk.Button(self.root, text="Skip", command=self.skip_initial_amount)
        self.skip_button.pack(pady=5)

    def initial_amount_submitted(self):
        amount = self.amount_entry.get()
        try:
            self.initial_amount = float(amount.replace(',', ''))
            self.balance = self.initial_amount
            messagebox.showinfo("Initial Amount", f"You have entered Rp {self.initial_amount:,.2f} as your initial amount.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def skip_initial_amount(self):
        messagebox.showinfo("Initial Amount", "You have chosen to skip entering initial amount.")
        self.open_main_menu()

    def open_main_menu(self):
        self.initial_amount_label.pack_forget()
        self.cash_wallet_label.pack_forget()
        self.amount_entry.pack_forget()
        self.done_button.pack_forget()
        self.skip_button.pack_forget()

        self.account_info_label = tk.Label(self.root, text=f"Account: {self.account_name}\nBalance: Rp {self.balance:,.2f}", font=("Arial", 14), bg='#003366', fg='white')
        self.account_info_label.pack(pady=(10, 20))

        self.tab_control = ttk.Notebook(self.root)

        self.transaction_tab = ttk.Frame(self.tab_control)
        self.statistic_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.transaction_tab, text="Transaction")
        self.tab_control.add(self.statistic_tab, text="Statistic")

        self.tab_control.pack(expand=1, fill='both')

        self.create_transaction_tab()
        self.create_statistic_tab()

    def create_transaction_tab(self):
        self.transaction_label = tk.Label(self.transaction_tab, text="Transaction", font=("Arial", 18))
        self.transaction_label.pack(pady=(20, 5))

        self.add_button = tk.Button(self.transaction_tab, text="+", font=("Arial", 12), bg='yellow', command=self.open_transaction_options)
        self.add_button.pack(pady=5)

    def create_statistic_tab(self):
        self.statistic_label = tk.Label(self.statistic_tab, text="Transaction History", font=("Arial", 18))
        self.statistic_label.pack(pady=(20, 5))

        self.period_label = tk.Label(self.statistic_tab, text="Select Period:", font=("Arial", 12))
        self.period_label.pack(pady=5)

        self.period_var = tk.StringVar(self.root)
        self.period_var.set("Weekly")

        periods = ["Weekly", "Monthly", "Yearly"]
        self.period_option = tk.OptionMenu(self.statistic_tab, self.period_var, *periods, command=self.update_transaction_history)
        self.period_option.pack(pady=5)

        self.transaction_type_label = tk.Label(self.statistic_tab, text="Select Transaction Type:", font=("Arial", 12))
        self.transaction_type_label.pack(pady=5)

        self.transaction_type_var = tk.StringVar(self.root)
        self.transaction_type_var.set("Expense")

        transaction_types = ["Income", "Expense", "Transfer"]
        self.transaction_type_option = tk.OptionMenu(self.statistic_tab, self.transaction_type_var, *transaction_types, command=self.update_transaction_history)
        self.transaction_type_option.pack(pady=5)

        self.transaction_history_text = tk.Text(self.statistic_tab, height=15, width=40)
        self.transaction_history_text.pack(pady=10, side=tk.LEFT)

        self.show_graph_button = tk.Button(self.statistic_tab, text="Show Graph", command=self.show_graph)
        self.show_graph_button.pack(pady=10, side=tk.LEFT)

        self.graph_frame = tk.Frame(self.statistic_tab)
        self.graph_frame.pack(pady=10, padx=10, fill=tk.BOTH, expand=True, side=tk.RIGHT)

    def open_transaction_options(self):
        self.income_button = tk.Button(self.transaction_tab, text="Income", font=("Arial", 12), command=self.open_income_input)
        self.income_button.pack(pady=5)

        self.expense_button = tk.Button(self.transaction_tab, text="Expense", font=("Arial", 12), command=self.open_expense_input)
        self.expense_button.pack(pady=5)

        self.transfer_button = tk.Button(self.transaction_tab, text="Transfer", font=("Arial", 12), command=self.open_transfer_input)
        self.transfer_button.pack(pady=5)

    def open_income_input(self):
        self.clear_transaction_options()

        self.income_label = tk.Label(self.transaction_tab, text="Income", font=("Arial", 18))
        self.income_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.category_label = tk.Label(self.transaction_tab, text="Category:", font=("Arial", 12))
        self.category_label.pack(pady=5)

        categories = ["Bonus", "Salary", "Award", "Investment", "Dividend", "Other"]
        self.category_var = tk.StringVar(self.root)
        self.category_var.set(categories[0])
        self.category_option = tk.OptionMenu(self.transaction_tab, self.category_var, *categories)
        self.category_option.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.income_submitted)
        self.submit_button.pack(pady=10)

    def open_expense_input(self):
        self.clear_transaction_options()

        self.expense_label = tk.Label(self.transaction_tab, text="Expense", font=("Arial", 18))
        self.expense_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.category_label = tk.Label(self.transaction_tab, text="Category:", font=("Arial", 12))
        self.category_label.pack(pady=5)

        categories = ["Food", "Entertainment", "Transport", "Education", "Investment", "Other"]
        self.category_var = tk.StringVar(self.root)
        self.category_var.set(categories[0])
        self.category_option = tk.OptionMenu(self.transaction_tab, self.category_var, *categories)
        self.category_option.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.expense_submitted)
        self.submit_button.pack(pady=10)

    def open_transfer_input(self):
        self.clear_transaction_options()

        self.transfer_label = tk.Label(self.transaction_tab, text="Transfer", font=("Arial", 18))
        self.transfer_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.category_label = tk.Label(self.transaction_tab, text="Category:", font=("Arial", 12))
        self.category_label.pack(pady=5)

        categories = ["Bank Transfer", "E-Wallet", "Other"]
        self.category_var = tk.StringVar(self.root)
        self.category_var.set(categories[0])
        self.category_option = tk.OptionMenu(self.transaction_tab, self.category_var, *categories)
        self.category_option.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.transfer_submitted)
        self.submit_button.pack(pady=10)

    def clear_transaction_options(self):
        if hasattr(self, 'income_button'):
            self.income_button.pack_forget()
        if hasattr(self, 'expense_button'):
            self.expense_button.pack_forget()
        if hasattr(self, 'transfer_button'):
            self.transfer_button.pack_forget()

    def income_submitted(self):
        date = self.date_entry.get()
        amount = self.amount_entry.get()
        description = self.description_entry.get()
        category = self.category_var.get()
        memo = self.memo_entry.get()

        try:
            amount = float(amount.replace(',', ''))
            self.transactions.append({"type": "Income", "date": date, "amount": amount, "description": description, "category": category, "memo": memo})
            self.balance += amount
            messagebox.showinfo("Income", "Income transaction added successfully.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def expense_submitted(self):
        date = self.date_entry.get()
        amount = self.amount_entry.get()
        description = self.description_entry.get()
        category = self.category_var.get()
        memo = self.memo_entry.get()

        try:
            amount = float(amount.replace(',', ''))
            self.transactions.append({"type": "Expense", "date": date, "amount": amount, "description": description, "category": category, "memo": memo})
            self.balance -= amount
            messagebox.showinfo("Expense", "Expense transaction added successfully.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def transfer_submitted(self):
        date = self.date_entry.get()
        amount = self.amount_entry.get()
        description = self.description_entry.get()
        category = self.category_var.get()
        memo = self.memo_entry.get()

        try:
            amount = float(amount.replace(',', ''))
            self.transactions.append({"type": "Transfer", "date": date, "amount": amount, "description": description, "category": category, "memo": memo})
            messagebox.showinfo("Transfer", "Transfer transaction added successfully.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def update_transaction_history(self, _=None):
        self.transaction_history_text.delete(1.0, tk.END)
        period = self.period_var.get()
        transaction_type = self.transaction_type_var.get()
        
        if period == "Weekly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=7)
        elif period == "Monthly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=30)
        elif period == "Yearly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=365)
        else:
            return

        filtered_transactions = [
            t for t in self.transactions 
            if datetime.datetime.strptime(t["date"], '%m/%d/%y') >= start_date and t["type"] == transaction_type
        ]
        
        for transaction in filtered_transactions:
            self.transaction_history_text.insert(tk.END, f"{transaction['date']} - {transaction['type']} - Rp {transaction['amount']:.2f} - {transaction['description']} - {transaction['category']} - {transaction['memo']}\n")

    def show_graph(self):
        period = self.period_var.get()
        transaction_type = self.transaction_type_var.get()
        
        if period == "Weekly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=7)
        elif period == "Monthly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=30)
        elif period == "Yearly":
            start_date = datetime.datetime.now() - datetime.timedelta(days=365)
        else:
            return

        filtered_transactions = [
            t for t in self.transactions 
            if datetime.datetime.strptime(t["date"], '%m/%d/%y') >= start_date and t["type"] == transaction_type
        ]

        categories = list(set(t["category"] for t in filtered_transactions))
        category_amounts = {category: 0 for category in categories}

        for transaction in filtered_transactions:
            category_amounts[transaction["category"]] += transaction["amount"]

        fig, ax = plt.subplots()
        ax.bar(category_amounts.keys(), category_amounts.values())
        ax.set_title(f"{transaction_type} by Category")
        ax.set_xlabel("Category")
        ax.set_ylabel("Amount")

        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = BudgetBuddyApp(root)
    root.mainloop()
