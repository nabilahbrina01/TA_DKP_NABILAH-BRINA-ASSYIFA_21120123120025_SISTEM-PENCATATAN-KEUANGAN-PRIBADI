import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import DateEntry
from PIL import Image, ImageTk
import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import mplcursors

class FinanSiapApp:
    def __init__(self, root):
        self.root = root
        self.root.title("FinanSiap")
        self.root.geometry("400x600")
        self.root.configure(bg='#003366')  # Warna biru tua
        self.account_name = ""
        self.initial_amount = 0.0
        self.balance = 0.0
        self.transactions = []

        self.create_widgets()

    def create_widgets(self):
        self.title_label = tk.Label(self.root, text="WELCOME TO", font=("Bookman Old Style", 45), bg='#003366', fg='white')
        self.title_label.pack(pady=(10, 0))  

        # Memuat gambar dan menampilkannya
        image = Image.open("photo_2024-05-24_23-36-54.png")
        image = image.resize((650, 350), Image.LANCZOS) 
        photo = ImageTk.PhotoImage(image)
        self.photo = photo
        self.image_label = tk.Label(self.root, image=self.photo, bg='#003366')
        self.image_label.pack(pady=(20, 0))  

        self.info_label = tk.Label(self.root, text="Kelola Keuanganmu, Raih Masa Depan Cerah", font=("Courier New", 12), bg='#003366', fg='white')
        self.info_label.pack(pady=(2, 20))  

        self.continue_button = tk.Button(self.root, text="Continue", command=self.open_account_setup)
        self.continue_button.pack(pady=10)

    def open_account_setup(self):
        self.title_label.pack_forget()
        self.image_label.pack_forget()
        self.info_label.pack_forget()
        self.continue_button.pack_forget()

        self.add_account_label = tk.Label(self.root, text="Add Account", font=("Arial", 18), bg='#003366', fg='white')
        self.add_account_label.pack(pady=(20, 5))

        self.choose_name_label = tk.Label(self.root, text="Choose A Name For Your Account", font=("Arial", 12), bg='#003366', fg='white')
        self.choose_name_label.pack(pady=5)

        self.account_name_entry = tk.Entry(self.root)
        self.account_name_entry.pack(pady=5)

        self.next_button = tk.Button(self.root, text="Next", command=self.open_initial_amount)
        self.next_button.pack(pady=20)

    def open_initial_amount(self):
        self.add_account_label.pack_forget()
        self.choose_name_label.pack_forget()
        self.account_name_entry.pack_forget()
        self.next_button.pack_forget()

        self.account_name = self.account_name_entry.get()

        self.initial_amount_label = tk.Label(self.root, text="INITIAL AMOUNT", font=("Arial", 18), bg='#003366', fg='white')
        self.initial_amount_label.pack(pady=(20, 5))

        self.cash_wallet_label = tk.Label(self.root, text="How much money do you have in your cash wallet?", font=("Arial", 12), bg='#003366', fg='white')
        self.cash_wallet_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.root)
        self.amount_entry.pack(pady=5)

        self.done_button = tk.Button(self.root, text="Done", command=self.initial_amount_submitted)
        self.done_button.pack(pady=5)

        self.skip_button = tk.Button(self.root, text="Skip", command=self.skip_initial_amount)
        self.skip_button.pack(pady=5)

    def initial_amount_submitted(self):
        amount = self.amount_entry.get()
        try:
            self.initial_amount = float(amount.replace(',', ''))
            self.balance = self.initial_amount
            messagebox.showinfo("Initial Amount", f"You have entered Rp {self.initial_amount:,.2f} as your initial amount.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def skip_initial_amount(self):
        messagebox.showinfo("Initial Amount", "You have chosen to skip entering initial amount.")
        self.open_main_menu()

    def open_main_menu(self):
        self.initial_amount_label.pack_forget()
        self.cash_wallet_label.pack_forget()
        self.amount_entry.pack_forget()
        self.done_button.pack_forget()
        self.skip_button.pack_forget()

        self.account_info_label = tk.Label(self.root, text=f"Account: {self.account_name}\nBalance: Rp {self.balance:,.2f}", font=("Arial", 14), bg='#003366', fg='white')
        self.account_info_label.pack(pady=(10, 20))

        self.tab_control = ttk.Notebook(self.root)

        self.transaction_tab = ttk.Frame(self.tab_control)
        self.statistic_tab = ttk.Frame(self.tab_control)
        self.graph_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.transaction_tab, text="Transaction")
        self.tab_control.add(self.statistic_tab, text="Statistic")
        self.tab_control.add(self.graph_tab, text="Grafik")

        self.tab_control.pack(expand=1, fill='both')

        self.create_transaction_tab()

        self.create_statistic_tab()

        self.create_graph_tab()

    def create_transaction_tab(self):
        self.transaction_label = tk.Label(self.transaction_tab, text="Transaction", font=("Arial", 18))
        self.transaction_label.pack(pady=(20, 5))

        self.add_button = tk.Button(self.transaction_tab, text="+", font=("Arial", 12), bg='yellow', command=self.open_transaction_options)
        self.add_button.pack(pady=5)

    def create_statistic_tab(self):
        self.statistic_label = tk.Label(self.statistic_tab, text="Transaction History", font=("Arial", 18))
        self.statistic_label.pack(pady=(20, 5))

        self.period_label = tk.Label(self.statistic_tab, text="Select Period:", font=("Arial", 12))
        self.period_label.pack(pady=5)

        self.period_var = tk.StringVar(self.root)
        self.period_var.set("Weekly")  

        periods = ["Weekly", "Monthly", "Yearly"]
        self.period_option = tk.OptionMenu(self.statistic_tab, self.period_var, *periods, command=self.update_transaction_history)
        self.period_option.pack(pady=5)

        self.transaction_history_text = tk.Text(self.statistic_tab, height=15, width=40)
        self.transaction_history_text.pack(pady=10)

    def get_filtered_transactions(self, period):
        now = datetime.datetime.now()
        filtered_transactions = []

        if period == "Weekly":
            one_week_ago = now - datetime.timedelta(weeks=1)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_week_ago]
        elif period == "Monthly":
            one_month_ago = now - datetime.timedelta(days=30)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_month_ago]
        elif period == "Yearly":
            one_year_ago = now - datetime.timedelta(days=365)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_year_ago]

        return filtered_transactions

    def open_transaction_options(self):
        self.income_button = tk.Button(self.transaction_tab, text="Income", font=("Arial", 12), command=self.open_income_input)
        self.income_button.pack(pady=5)

        self.expense_button = tk.Button(self.transaction_tab, text="Expense", font=("Arial", 12), command=self.open_expense_input)
        self.expense_button.pack(pady=5)

        self.transfer_button = tk.Button(self.transaction_tab, text="Transfer", font=("Arial", 12), command=self.open_transfer_input)
        self.transfer_button.pack(pady=5)

    def open_income_input(self):
        self.clear_transaction_options()

        self.income_label = tk.Label(self.transaction_tab, text="Income", font=("Arial", 18))
        self.income_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.category_label = tk.Label(self.transaction_tab, text="Category:", font=("Arial", 12))
        self.category_label.pack(pady=5)

        categories = ["Bonus", "Salary", "Award", "Investment", "Dividend", "Other"]
        self.category_var = tk.StringVar(self.root)
        self.category_var.set(categories[0])  # Set default value
        self.category_option = tk.OptionMenu(self.transaction_tab, self.category_var, *categories)
        self.category_option.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.income_submitted)
        self.submit_button.pack(pady=10)

    def open_expense_input(self):
        self.clear_transaction_options()

        self.expense_label = tk.Label(self.transaction_tab, text="Expense", font=("Arial", 18))
        self.expense_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.category_label = tk.Label(self.transaction_tab, text="Category:", font=("Arial", 12))
        self.category_label.pack(pady=5)

        categories = ["Bills", "Education", "Entertainment", "Fitness", "Food", "Health", "Furniture", "Other"]
        self.category_var = tk.StringVar(self.root)
        self.category_var.set(categories[0])  # Set default value
        self.category_option = tk.OptionMenu(self.transaction_tab, self.category_var, *categories)
        self.category_option.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.expense_submitted)
        self.submit_button.pack(pady=10)

    def open_transfer_input(self):
        self.clear_transaction_options()

        self.transfer_label = tk.Label(self.transaction_tab, text="Transfer", font=("Arial", 18))
        self.transfer_label.pack(pady=(20, 5))

        self.date_label = tk.Label(self.transaction_tab, text="Date:", font=("Arial", 12))
        self.date_label.pack(pady=5)

        self.date_entry = DateEntry(self.transaction_tab, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.date_entry.pack()

        self.amount_label = tk.Label(self.transaction_tab, text="Amount:", font=("Arial", 12))
        self.amount_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.transaction_tab)
        self.amount_entry.pack()

        self.description_label = tk.Label(self.transaction_tab, text="Description:", font=("Arial", 12))
        self.description_label.pack(pady=5)

        self.description_entry = tk.Entry(self.transaction_tab)
        self.description_entry.pack()

        self.fee_label = tk.Label(self.transaction_tab, text="Fee:", font=("Arial", 12))
        self.fee_label.pack(pady=5)

        self.fee_entry = tk.Entry(self.transaction_tab)
        self.fee_entry.pack()

        self.memo_label = tk.Label(self.transaction_tab, text="Memo:", font=("Arial", 12))
        self.memo_label.pack(pady=5)

        self.memo_entry = tk.Entry(self.transaction_tab)
        self.memo_entry.pack()

        self.submit_button = tk.Button(self.transaction_tab, text="Submit", font=("Arial", 12), command=self.transfer_submitted)
        self.submit_button.pack(pady=10)

    def income_submitted(self):
        # Simpan detail Income dan update saldo
        date = self.date_entry.get()
        amount_str = self.amount_entry.get().replace(',', '')
        description = self.description_entry.get()
        category = self.category_var.get()
        memo = self.memo_entry.get()

        try:
            amount = float(amount_str)
            self.balance += amount
            self.transactions.append({"type": "Income", "date": date, "amount": amount, "description": description, "category": category, "memo": memo})
            self.update_account_info()
            messagebox.showinfo("Income Submitted", f"Income details:\nDate: {date}\nAmount: Rp {amount:,.2f}\nDescription: {description}\nCategory: {category}\nMemo: {memo}")
            self.return_to_main()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def expense_submitted(self):
        date = self.date_entry.get()
        amount_str = self.amount_entry.get().replace(',', '')
        description = self.description_entry.get()
        category = self.category_var.get()
        memo = self.memo_entry.get()

        try:
            amount = float(amount_str)
            self.balance -= amount
            self.transactions.append({"type": "Expense", "date": date, "amount": amount, "description": description, "category": category, "memo": memo})
            self.update_account_info()
            messagebox.showinfo("Expense Submitted", f"Expense details:\nDate: {date}\nAmount: Rp {amount:,.2f}\nDescription: {description}\nCategory: {category}\nMemo: {memo}")
            self.return_to_main()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def transfer_submitted(self):
        # Simpan detail Transfer dan update saldo
        date = self.date_entry.get()
        amount_str = self.amount_entry.get().replace(',', '')
        description = self.description_entry.get()
        fee_str = self.fee_entry.get().replace(',', '')
        memo = self.memo_entry.get()

        try:
            amount = float(amount_str)
            fee = float(fee_str)
            self.balance -= (amount            + fee)
            self.transactions.append({"type": "Transfer", "date": date, "amount": amount, "description": description, "fee": fee, "memo": memo})
            self.update_account_info()
            messagebox.showinfo("Transfer Submitted", f"Transfer details:\nDate: {date}\nAmount: Rp {amount:,.2f}\nDescription: {description}\nFee: Rp {fee:,.2f}\nMemo: {memo}")
            self.return_to_main()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def update_account_info(self):
        self.account_info_label.config(text=f"Account: {self.account_name}\nBalance: Rp {self.balance:,.2f}")

    def return_to_main(self):
        for widget in self.transaction_tab.winfo_children():
            widget.pack_forget()
        
        self.create_transaction_tab()

    def clear_transaction_options(self):
        self.income_button.pack_forget()
        self.expense_button.pack_forget()
        self.transfer_button.pack_forget()

    def update_transaction_history(self, period):
        self.transaction_history_text.delete(1.0, tk.END)

        now = datetime.datetime.now()
        filtered_transactions = []

        if period == "Weekly":
            one_week_ago = now - datetime.timedelta(weeks=1)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_week_ago]
        elif period == "Monthly":
            one_month_ago = now - datetime.timedelta(days=30)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_month_ago]
        elif period == "Yearly":
            one_year_ago = now - datetime.timedelta(days=365)
            filtered_transactions = [t for t in self.transactions if datetime.datetime.strptime(t['date'], "%m/%d/%y") >= one_year_ago]

        for transaction in filtered_transactions:
            self.transaction_history_text.insert(tk.END, f"{transaction['type']}: {transaction['date']} - Rp {transaction['amount']:,.2f}\nDescription: {transaction['description']}\n")
            if transaction['type'] == "Transfer":
                self.transaction_history_text.insert(tk.END, f"Fee: Rp {transaction['fee']:,.2f}\n")
            self.transaction_history_text.insert(tk.END, f"Category: {transaction['category']}\nMemo: {transaction['memo']}\n\n")
    #membuat grafik
    def create_graph_tab(self):
        self.graph_label = tk.Label(self.graph_tab, text="Grafik", font=("Arial", 18))
        self.graph_label.pack(pady=(20, 5))

        self.graph_type_label = tk.Label(self.graph_tab, text="Select Graph Type:", font=("Arial", 12))
        self.graph_type_label.pack(pady=5)

        graph_types = ["Income", "Expense", "Transfer"]
        self.graph_type_var = tk.StringVar(self.root)
        self.graph_type_var.set(graph_types[0])
        self.graph_type_option = tk.OptionMenu(self.graph_tab, self.graph_type_var, *graph_types, command=self.update_graph)
        self.graph_type_option.pack(pady=5)

        self.period_label = tk.Label(self.graph_tab, text="Select Period:", font=("Arial", 12))
        self.period_label.pack(pady=5)

        self.period_var = tk.StringVar(self.root)
        self.period_var.set("Weekly")  

        periods = ["Weekly", "Monthly", "Yearly"]
        self.period_option = tk.OptionMenu(self.graph_tab, self.period_var, *periods, command=self.update_graph)
        self.period_option.pack(pady=5)

        self.graph_canvas = tk.Canvas(self.graph_tab, width=400, height=300)  # ukuran canvas
        self.graph_canvas.pack(pady=10)
        self.update_graph()  # memanggil update_graph

    def update_graph(self, *args):
        transaction_type = self.graph_type_var.get()
        period = self.period_var.get()

        # Dapatkan data statistik berdasarkan jenis transaksi dan periode yang dipilih
        filtered_transactions = self.get_filtered_transactions(period)
        filtered_transactions = [t for t in filtered_transactions if t['type'] == transaction_type]

        # Siapkan dictionary untuk menyimpan total transaksi untuk setiap waktu (mingguan, bulanan, atau tahunan)
        transaction_totals = {}

        # Iterasi melalui transaksi yang difilter dan hitung total untuk setiap kategori pada setiap waktu
        for transaction in filtered_transactions:
            date = transaction['date']
            category = transaction['category']
            amount = transaction['amount']

            # Ubah format tanggal ke minggu, bulan, atau tahun tergantung pada periode yang dipilih
            if period == "Weekly":
                time_period = datetime.datetime.strptime(date, "%m/%d/%y").strftime("%U-%Y")
            elif period == "Monthly":
                time_period = datetime.datetime.strptime(date, "%m/%d/%y").strftime("%m-%Y")
            elif period == "Yearly":
                time_period = datetime.datetime.strptime(date, "%m/%d/%y").strftime("%Y")

            # Tambahkan jumlah transaksi ke dalam dictionary
            if time_period in transaction_totals:
                if category in transaction_totals[time_period]:
                    transaction_totals[time_period][category] += amount
                else:
                    transaction_totals[time_period][category] = amount
            else:
                transaction_totals[time_period] = {category: amount}

        # Ambil waktu (minggu, bulan, atau tahun) dan jumlah transaksi untuk setiap kategori dari data statistik
        time_periods = sorted(transaction_totals.keys())
        categories = list(set(category for time_period in transaction_totals.values() for category in time_period.keys()))

        # Siapkan data untuk plotting
        data = {category: [transaction_totals[time_period].get(category, 0) for time_period in time_periods] for category in categories}
       
        # Buat grafik menggunakan data statistik
        fig, ax = plt.subplots(figsize=(10, 6))

        # Plot garis untuk setiap kategori
        offset = 0  # Menyimpan offset vertikal
        offset_increment = 0  # Penambahan offset setiap kali plot
        for category in categories:
            # Tambahkan offset ke data sebelum memplot
            plot_data = [val + offset for val in data[category]]
            ax.plot(time_periods, plot_data, marker='o', label=category)
            offset += offset_increment  # Sesuaikan offset untuk kategori berikutnya

        ax.set_xlabel('Time Period')
        ax.set_ylabel('Amount')
        ax.set_title(f'{transaction_type} ({period})')

        # legend dengan label dari garis plot yang ada(untuk menampilkan keterangan warna)
        ax.legend()

        # menghapus frame lama
        self.graph_canvas.destroy()

        # frame baru untuk menampilkan grafik
        self.graph_canvas = tk.Frame(self.graph_tab)
        self.graph_canvas.pack(pady=10)

        # menampilkan grafik di dalam frame baru
        canvas = FigureCanvasTkAgg(fig, master=self.graph_canvas)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        # mplcursors untuk membaca nilai pada grafik (kotak kuning)
        mplcursors.cursor(hover=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = FinanSiapApp(root)
    root.mainloop()

