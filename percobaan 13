import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import DateEntry
import datetime
from PIL import Image, ImageTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class BudgetBuddyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("BudgetBuddy")
        self.root.geometry("800x600")  # Mengubah ukuran GUI agar muat dengan lebih baik
        self.root.configure(bg='#003366')  # Warna biru tua
        self.account_name = ""
        self.initial_amount = 0.0
        self.balance = 0.0
        self.transactions = []

        self.create_widgets()

    def create_widgets(self):
        # Membuat label judul
        self.title_label = tk.Label(self.root, text="WELCOME TO", font=("Arial Black", 45), bg='#003366', fg='white')
        self.title_label.pack(pady=(10, 0))  # Mengatur jarak antara title dan slogan

        # Memuat gambar dan mengubah ukurannya
        image = Image.open("photo_2024-05-21_21-04-10.png")
        image = image.resize((600, 200), Image.LANCZOS)  # Mengubah ukuran gambar menjadi 600x200 piksel
        photo = ImageTk.PhotoImage(image)

        # Menyimpan referensi ke photo untuk mencegah garbage collection
        self.photo = photo

        # Menampilkan gambar pada label
        self.image_label = tk.Label(self.root, image=self.photo, bg='#003366')
        self.image_label.pack(pady=(20, 0))  # Mengatur jarak antara gambar dan title

        # Membuat label tambahan
        self.info_label = tk.Label(self.root, text="Track Your Income and Expenses Effortlessly", font=("Arial", 12), bg='#003366', fg='white')
        self.info_label.pack(pady=(2, 20))  # Mengatur jarak antara slogan dan tombol Continue

        # Membuat tombol Continue
        self.continue_button = tk.Button(self.root, text="Continue", command=self.open_account_setup)
        self.continue_button.pack(pady=10)

    def open_account_setup(self):
        # Menghapus widget sebelumnya
        self.title_label.pack_forget()
        self.image_label.pack_forget()
        self.info_label.pack_forget()
        self.continue_button.pack_forget()

        # Membuat widget baru untuk setup akun
        self.add_account_label = tk.Label(self.root, text="Add Account", font=("Arial", 18), bg='#003366', fg='white')
        self.add_account_label.pack(pady=(20, 5))

        self.choose_name_label = tk.Label(self.root, text="Choose A Name For Your Account", font=("Arial", 12), bg='#003366', fg='white')
        self.choose_name_label.pack(pady=5)

        self.account_name_entry = tk.Entry(self.root)
        self.account_name_entry.pack(pady=5)

        self.next_button = tk.Button(self.root, text="Next", command=self.open_initial_amount)
        self.next_button.pack(pady=20)

    def open_initial_amount(self):
        # Menghapus widget sebelumnya
        self.add_account_label.pack_forget()
        self.choose_name_label.pack_forget()
        self.account_name_entry.pack_forget()
        self.next_button.pack_forget()

        # Simpan nama akun
        self.account_name = self.account_name_entry.get()

        # Membuat widget baru untuk jumlah uang awal
        self.initial_amount_label = tk.Label(self.root, text="INITIAL AMOUNT", font=("Arial", 18), bg='#003366', fg='white')
        self.initial_amount_label.pack(pady=(20, 5))

        self.cash_wallet_label = tk.Label(self.root, text="How much money do you have in your cash wallet?", font=("Arial", 12), bg='#003366', fg='white')
        self.cash_wallet_label.pack(pady=5)

        self.amount_entry = tk.Entry(self.root)
        self.amount_entry.pack(pady=5)

        self.done_button = tk.Button(self.root, text="Done", command=self.initial_amount_submitted)
        self.done_button.pack(pady=5)

        self.skip_button = tk.Button(self.root, text="Skip", command=self.skip_initial_amount)
        self.skip_button.pack(pady=5)

    def initial_amount_submitted(self):
        amount = self.amount_entry.get()
        try:
            self.initial_amount = float(amount.replace(',', ''))
            self.balance = self.initial_amount
            messagebox.showinfo("Initial Amount", f"You have entered Rp {self.initial_amount:,.2f} as your initial amount.")
            self.open_main_menu()
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid amount.")

    def skip_initial_amount(self):
        messagebox.showinfo("Initial Amount", "You have chosen to skip entering initial amount.")
        self.open_main_menu()

    def open_main_menu(self):
        # Menghapus widget sebelumnya
        self.initial_amount_label.pack_forget()
        self.cash_wallet_label.pack_forget()
        self.amount_entry.pack_forget()
        self.done_button.pack_forget()
        self.skip_button.pack_forget()

        # Menampilkan nama akun dan jumlah uang di bagian atas
        self.account_info_label = tk.Label(self.root, text=f"Account: {self.account_name}\nBalance: Rp {self.balance:,.2f}", font=("Arial", 14), bg='#003366', fg='white')
        self.account_info_label.pack(pady=(10, 20))

        # Membuat Tabbed interface untuk fitur Transaction, Statistic, dan Graph
        self.tab_control = ttk.Notebook(self.root)

        self.transaction_tab = ttk.Frame(self.tab_control)
        self.statistic_tab = ttk.Frame(self.tab_control)
        self.graph_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.transaction_tab, text="Transaction")
        self.tab_control.add(self.statistic_tab, text="Statistic")
        self.tab_control.add(self.graph_tab, text="Graph")

        self.tab_control.pack(expand=1, fill='both')

        # Membuat widget untuk tab Transaction
        self.create_transaction_tab()

        # Membuat widget untuk tab Statistic
        self.create_statistic_tab()

        # Membuat widget untuk tab Graph
        self.create_graph_tab()

    def create_transaction_tab(self):
        self.transaction_label = tk.Label(self.transaction_tab, text="Transaction", font=("Arial", 18))
        self.transaction_label.pack(pady=(20, 5))

        # Membuat tombol tambah (+)
        self.add_button = tk.Button(self.transaction_tab, text="+", font=("Arial", 12), bg='yellow', command=self.open_transaction_options)
        self.add_button.pack(pady=5)

   
    def create_graph_tab(self):
        self.graph_label = tk.Label(self.graph_tab, text="Graph", font=("Arial", 18))
        self.graph_label.pack(pady=(20, 5))

        # Membuat opsi untuk memilih jenis grafik
        self.graph_type_label = tk.Label(self.graph_tab, text="Select Graph Type:", font=("Arial", 12))
        self.graph_type_label.pack(pady=5)

        graph_types = ["Income", "Expense", "Transfer"]
        self.graph_type_var = tk.StringVar(self.root)
        self.graph_type_var.set(graph_types[0])  # Set default value
        self.graph_type_option = tk.OptionMenu(self.graph_tab, self.graph_type_var, *graph_types)
        self.graph_type_option.pack(pady=5)

        # Membuat opsi untuk memilih periode grafik
        self.period_label = tk.Label(self.graph_tab, text="Select Period:", font=("Arial", 12))
        self.period_label.pack(pady=5)

        periods = ["Weekly", "Monthly", "Yearly"]
        self.period_var = tk.StringVar(self.root)
        self.period_var.set(periods[0])  # Set default value
        self.period_option = tk.OptionMenu(self.graph_tab, self.period_var, *periods)
        self.period_option.pack(pady=5)

        # Membuat tombol untuk menampilkan grafik
        self.show_graph_button = tk.Button(self.graph_tab, text="Show Graph", font=("Arial", 12), command=self.show_graph)
        self.show_graph_button.pack(pady=10)

        # Menampilkan area kosong untuk grafik
        self.graph_canvas = tk.Canvas(self.graph_tab, bg='white', width=700, height=300)
        self.graph_canvas.pack(pady=10)

    def show_graph(self):
        graph_type = self.graph_type_var.get()
        period = self.period_var.get()

        # Dapatkan data yang sesuai untuk grafik
        data = self.get_graph_data(graph_type, period)

        # Buat grafik menggunakan matplotlib
        plt.clf()
        plt.bar(data.keys(), data.values(), color='skyblue')
        plt.xlabel('Category')
        plt.ylabel('Amount')
        plt.title(f'{graph_type} Graph ({period})')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        # Menyimpan grafik sebagai file sementara
        graph_file = "temp_graph.png"
        plt.savefig(graph_file)

        # Tampilkan grafik di area Canvas menggunakan PIL
        graph_image = Image.open(graph_file)
        graph_image = graph_image.resize((700, 300), Image.ANTIALIAS)  # Mengubah ukuran grafik
        graph_photo = ImageTk.PhotoImage(graph_image)

        # Menyimpan referensi ke foto grafik untuk mencegah garbage collection
        self.graph_photo = graph_photo

        # Tampilkan grafik di Canvas
        self.graph_canvas.create_image(0, 0, anchor=tk.NW, image=self.graph_photo)

 